let StarterConfig = {
	MinGameTime: 300, // Minimum game length in seconds. If a game is ended too soon, the rest of the time is waited in the lobby
	PingQuitDelay: 30, // Time in seconds to wait in lobby after quitting due to high ping
	CreateGameDelay: 10, // Seconds to wait before creating a new game
	ResetCount: 99, // Reset game count back to 1 every X games.
	CharacterDifference: 99, // Character level difference. Set to false to disable character difference.
	ChatActionsDelay: 2, // Seconds to wait in lobby before entering a channel

	// ChannelConfig can override these options for individual profiles.
	JoinChannel: "", // Default channel. Can be an array of channels - ["channel 1", "channel 2"]
	FirstJoinMessage: "", // Default join message. Can be an array of messages
	AnnounceGames: false, // Default value
	AfterGameMessage: "", // Default message after a finished game. Can be an array of messages
	SwitchKeyDelay: 300, // Seconds to wait before switching a used/banned key or after realm down
	CrashDelay: 10, // Seconds to wait after a d2 window crash
	FTJDelay: 300, // Seconds to wait after failing to create a game
	RealmDownDelay: 10, // Minutes to wait after getting Realm Down message
	InvalidPasswordDelay: 10, // Minutes to wait after getting Invalid Password message
	UnableToConnectDelay: 5, // Minutes to wait after Unable To Connect message
	TCPIPNoHostDelay: 5, // Seconds to wait after Cannot Connect To Server message
	CDKeyInUseDelay: 5, // Minutes to wait before connecting again if CD-Key is in use.
	ConnectingTimeout: 20, // Seconds to wait before cancelling the 'Connecting...' screen
	PleaseWaitTimeout: 100, // Seconds to wait before cancelling the 'Please Wait...' screen
	WaitInLineTimeout: 12000, // Seconds to wait before cancelling the 'Waiting in Line...' screen
	GameDoesNotExistTimeout: 600, // Seconds to wait before cancelling the 'Game does not exist.' screen
	DelayBeforeLogin: rand(5, 25), // Seconds to wait before logging in
	VersionErrorDelay: rand(5, 30), // Seconds to wait after 'unable to identify version' message

	// Global Account Settings.
	GlobalAccount: "", // Set value for a global account. (MAX Characters 12 plus AccountSuffixLength) 
	AccountSuffixLength: 3, // Set Global Account value for random numbers at the end of the name. (Minimum suffix 3)
	GlobalAccountPassword: "" // Set value for a global password for account generation.
};

let ChannelConfig = {
	/* Override default values for JoinChannel, FirstJoinMessage, AnnounceGames and AfterGameMessage per profile
		It's possible to override any number of these options (you don't have to put all of them)

		**** DO NOT EDIT ANYTHING INSIDE THIS COMMENT BLOCK ***

		Format:

		"Profile Name": {
			JoinChannel: "channel name", -OR- ["channel 1", "channel 2"],
			FirstJoinMessage: "first message", -OR- ["join msg 1", "join msg 2"],
			AnnounceGames: true,
			AfterGameMessage: "message after a finished run" -OR- ["msg 1", msg 2"]
		}
	*/
	// Add your lines under here

};

// No touchy!
include('polyfill.js');
include("json2.js");
include("OOG.js");
include("automule.js");
include("gambling.js");
include("craftingsystem.js");
include("torchsystem.js");
include("common/misc.js");
include("common/util.js");
include("common/pather.js");
include("SoloPlay/Tools/Developer.js");
include("SoloPlay/Tools/CharData.js");
include("SoloPlay/Tools/Tracker.js");
include("SoloPlay/Tools/NameGen.js");
include("SoloPlay/Tools/OOGOverrides.js");
include("SoloPlay/Functions/SoloEvents.js");
include("SoloPlay/Functions/ConfigOverrides.js");

let firstRun = false;

if (!FileTools.exists("data/" + me.profile + ".json") && DataFile.create()) {
	firstRun = true;
	delay(Math.floor(rand(1, 20)));
}

if (!FileTools.exists(CharData.filePath) && CharData.create()) {
	delay(Math.floor(rand(1, 20)));
}

if (Developer.logPerformance) {
	Tracker.initialize();
}

let gameInfo, joinInfo, chatActionsDone,
	handle, firstLogin, connectFail, setUp, deadCheck, connectFailRetry, gameTracker,
	battlenet = Profile().type === 2,
	isUp = "no",
	realmMap = {"east": "useast", "west": "uswest", "europe": "europe", "asia": "asia"},
	charClassMap = {"ZON": "amazon", "SOR": "sorceress", "NEC": "necromancer", "PAL": "paladin", "BAR": "barbarian", "DRU": "druid", "SIN": "assassin"};

function ReceiveCopyData (mode, msg) {
	var buildCheck, obj;

	switch (msg) {
	case "Handle":
		handle = mode;

		break;
	}

	switch (mode) {
	case 1: // Join Info
		print("Got Join Info");
		joinInfo = JSON.parse(msg);

		SoloEvents.gameInfo.gameName = joinInfo.gameName.toLowerCase();
		SoloEvents.gameInfo.gamePass = joinInfo.gamePass.toLowerCase();

		break;
	case 2: // Game info
		print("Received Game Info");
		gameInfo = JSON.parse(msg);

		break;
	case 3: // Game request
		// Don't let others join mule/torch/key/gold drop game
		if (AutoMule.inGame || Gambling.inGame || TorchSystem.inGame || CraftingSystem.inGame) {
			break;
		}

		if (gameInfo) {
			obj = JSON.parse(msg);

			if ([4, 5].includes(Profile().type)) {
				if (me.gameReady) {
					D2Bot.joinMe(obj.profile, me.gameserverip.toString(), "", "", true);
				}
			} else {
				if (me.gameReady) {
					D2Bot.joinMe(obj.profile, me.gamename.toLowerCase(), "", me.gamepassword.toLowerCase(), isUp);
				} else {
					D2Bot.joinMe(obj.profile, gameInfo.gameName.toLowerCase(), Starter.gameCount, gameInfo.gamePass.toLowerCase(), isUp);
				}
			}
		}

		break;
	case 4: // Heartbeat ping
		if (msg === "pingreq") {
			sendCopyData(null, me.windowtitle, 4, "pingrep");
		}

		break;
	case 0xf124: // Cached info retrieval
		if (msg !== "null") {
			gameInfo.crashInfo = JSON.parse(msg);
		}

		break;
	case 1638:
		try {
			obj = JSON.parse(msg);
			setUp = {};
			setUp.profile = me.profile.toUpperCase();
			setUp.account = obj.Account;
			setUp.password = "";
			setUp.charName = obj.Character;
			setUp.tag = (obj.Tag.trim().capitalize(true) || "");
			setUp.difficulty = obj.Difficulty;
			obj.Realm = obj.Realm.toLowerCase();
			setUp.realm = ["east", "west"].includes(obj.Realm) ? "us" + obj.Realm : obj.Realm;

			buildCheck = setUp.profile.split("-"); // SCL-ZON123
			setUp.hardcore = buildCheck[0].indexOf("HC") !== -1; // SC softcore = false
			setUp.expansion = buildCheck[0].indexOf("CC") === -1; // not CC so not classic - true
			setUp.ladder = buildCheck[0].indexOf("NL") === -1; // not NL so its ladder - true

			if (buildCheck.length <= 1) {
				D2Bot.printToConsole('Please update profile name. Example: "HCCNL-PAL" will make a Hardcore Classic NonLadder Paladin', 6);
				D2Bot.printToConsole("If you are still confused please read the included readMe. https://github.com/blizzhackers/kolbot-SoloPlay/blob/main/README.md", 6);
				D2Bot.stop();
			}

			buildCheck[1] = buildCheck[1].toString().substring(0, 3);

			if (charClassMap[buildCheck[1]]) {
				setUp.charClass = charClassMap[buildCheck[1]];
			} else {
				throw new Error("Invalid profile name, couldn't set character class"); 
			} 

			if (setUp.tag !== "") {
				{
					let soloStats = CharData.getStats();

					if (!soloStats.me.finalBuild || soloStats.me.finalBuild !== setUp.tag) {
						D2Bot.setProfile(null, null, null, null, null, setUp.tag);
						CharData.updateData("me", "finalBuild", setUp.tag);
						soloStats.me.finalBuild = setUp.tag;
					}

					if (!["Start", "Stepping", "Leveling"].includes(soloStats.me.currentBuild) && soloStats.me.currentBuild !== soloStats.me.finalBuild) {
						CharData.updateData("me", "currentBuild", "Leveling");
						soloStats.me.currentBuild = "Leveling";
					}
				}
			} else {
				throw new Error("Please update profile InfoTag. Missing the finalBuild.");
			}
		} catch (e) {
			Misc.errorReport(e);
			D2Bot.stop();
		}

		break;
	}
}

function deleteAndRemakeChar (info) {
	me.blockMouse = true;

	let control, text;
		
	ControlAction.findCharacter(info); //Scroll down until the specific control is visible

	MainLoop:
		// Cycle until in lobby
		while (getLocation() !== 1) { 
			switch (getLocation()) {
				case 12: // character select
					control = getControl(4, 37, 178, 200, 92);

					if (control) {
						do {
							text = control.getText();

							if (text instanceof Array && typeof text[1] === "string" && text[1].toLowerCase() === info.charName.toLowerCase()) {
								control.click();
								ControlAction.click(6, 433, 528, 168, 60); // click delete
								delay(500);
								ControlAction.click(6, 421, 337, 96, 32); // confirm delete

								break MainLoop;
							}
						} while (control.getNext());
					}

					break;
				case 42: // empty character select
					break MainLoop;

					break;
				case 14: // disconnected?
				case 30: // player not found?
					me.blockMouse = false;

					return false;
				default:
					break;
			}

			delay(100);
		}

	me.blockMouse = false;

	// Delete old files - leaving csv file's for now as I don't think they interfere with the overlay
	CharData.delete(true);

	DataFile.create();
	CharData.updateData("me", "finalBuild", setUp.tag);
	Developer.logPerformance && Tracker.initialize();

	D2Bot.printToConsole("Deleted: " + info.charName + ". Now remaking...", 6);
	ControlAction.makeCharacter(setUp);

	return true;
}

function saveInfo (info) {
	// Data-file already exists
	if (FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charClass + "-" + info.charName + ".json")) {
		return;
	}

	let folder, string;

	if (!FileTools.exists("logs/Kolbot-SoloPlay")) {
		folder = dopen("logs");
		folder.create("Kolbot-SoloPlay");
	}

	if (!FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm)) {
		folder = dopen("logs/Kolbot-SoloPlay");
		folder.create(info.realm);
	}

	if (!FileTools.exists("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charName + ".json")) {
		string = JSON.stringify(info);
		FileTools.writeText("logs/Kolbot-SoloPlay/" + info.realm + "/" + info.charClass + "-" + info.charName + ".json", string);
	}
}

function ScriptMsgEvent (msg) {
	if (typeof msg !== "string") return;
	switch (msg) {
	case "mule":
		AutoMule.check = true;

		break;
	case "muleTorch":
		AutoMule.torchAnniCheck = 1;

		break;
	case "muleAnni":
		AutoMule.torchAnniCheck = 2;

		break;
	case "torch":
		TorchSystem.check = true;

		break;
	case "crafting":
		CraftingSystem.check = true;

		break;
	case "getMuleMode":
		if (AutoMule.torchAnniCheck === 2) {
			scriptBroadcast("2");
		} else if (AutoMule.torchAnniCheck === 1) {
			scriptBroadcast("1");
		} else if (AutoMule.check) {
			scriptBroadcast("0");
		}

		break;
	case "pingquit":
		Starter.pingQuit = true;

		break;
	case "event":
		SoloEvents.check = true;

		break;
	}
}

function timer (tick) {
	let timeStr = " (Time:" + new Date(getTickCount() - tick).toISOString().slice(11, -5) + ") ";
	
	if (Developer.displayClockInConsole) {
		try {
			gameTracker === undefined && (gameTracker = Developer.readObj(Tracker.GTPath));
			let currInGame = getTickCount() - tick;
			let totalTime = Developer.formatTime(gameTracker.Total + currInGame);
			let totalInGame = Developer.formatTime(gameTracker.InGame + currInGame);
			let totalDays = Developer.totalDays(gameTracker.Total + currInGame);
			timeStr += ("(Days: " + totalDays + ") (Total: " + totalTime + ") (IG: " + totalInGame + ") (OOG: " + Developer.formatTime(gameTracker.OOG) + ")");
		} catch (e) {
			print(e);
		}
	}
	return timeStr;
}

function randomNumberGen (len) {
    let rval = "",
        nums = "0123456789";

    len = len ? len : rand(5, 14);

    for (let i = 0; i < len; i++) {
        rval += nums[rand(0, nums.length - 1)];
    }

    return rval;
}

function locationAction (location) {
	let i, control, string, text;

	MainSwitch:
	switch (location) {
	case 0:
		ControlAction.click();

		break;
	case 1:	// Lobby
		D2Bot.updateStatus("Lobby");
		saveInfo(setUp);

		me.blockKeys = false;

		!firstLogin && (firstLogin = true);
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (StarterConfig.PingQuitDelay && Starter.pingQuit) {
			ControlAction.timeoutDelay("Ping Delay", StarterConfig.PingQuitDelay * 1e3);

			Starter.pingQuit = false;
		}

		if (StarterConfig.JoinChannel !== "" || (ChannelConfig[me.profile] && ChannelConfig[me.profile].JoinChannel !== "")) {
			ControlAction.click(6, 27, 480, 120, 20);

			break;
		}

		if (Starter.inGame || gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < StarterConfig.MinGameTime * 1e3 && !joinInfo) {
				ControlAction.timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck() || SoloEvents.outOfGameCheck()) {
				break;
			}

			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (StarterConfig.ResetCount && Starter.gameCount > StarterConfig.ResetCount) {
				Starter.gameCount = 1;

				DataFile.updateStats("runs", Starter.gameCount);
			}
		}

		// Create
		if (!ControlAction.click(6, 533, 469, 120, 20)) {
			break;
		}

		deadCheck = (setUp.hardcore && getControl(6, 533, 469, 120, 20) && getControl(6, 533, 469, 120, 20).disabled === 4);

		if (deadCheck) {
			D2Bot.updateStatus("Character died");
			D2Bot.printToConsole("Character died.", 6);
			delay(5000);
			ControlAction.click(6, 693, 490, 80, 20);
			break;
		}

		// In case create button gets bugged
		if (!Starter.locationTimeout(5000, location)) { 
			// Join
			if (!ControlAction.click(6, 652, 469, 120, 20)) {
				break;
			}

			// Create
			if (!ControlAction.click(6, 533, 469, 120, 20)) {
				break;
			}
		}

		break;
	case 2: // Waiting In Line
		D2Bot.updateStatus("Waiting...");
		Starter.locationTimeout(StarterConfig.WaitInLineTimeout * 1e3, location);
		ControlAction.click(6, 433, 433, 96, 32);

		break;
	case 3: // Lobby Chat
		D2Bot.updateStatus("Lobby Chat");
		Starter.lastGameStatus === "pending" && (Starter.gameCount += 1);

		if (Starter.inGame || gameInfo.error) {
			!Starter.gameStart && (Starter.gameStart = DataFile.getStats().ingameTick);

			if (getTickCount() - Starter.gameStart < StarterConfig.MinGameTime * 1e3) {
				ControlAction.timeoutDelay("Min game time wait", StarterConfig.MinGameTime * 1e3 + Starter.gameStart - getTickCount());
			}
		}

		if (Starter.inGame) {
			if (AutoMule.outOfGameCheck() || TorchSystem.outOfGameCheck() || Gambling.outOfGameCheck() || CraftingSystem.outOfGameCheck() || SoloEvents.outOfGameCheck()) {
				break;
			}

			print("updating runs");
			D2Bot.updateRuns();

			Starter.gameCount += 1;
			Starter.lastGameStatus = "ready";
			Starter.inGame = false;

			if (StarterConfig.ResetCount && Starter.gameCount > StarterConfig.ResetCount) {
				Starter.gameCount = 1;

				DataFile.updateStats("runs", Starter.gameCount);
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AfterGameMessage")) {
				Starter.chanInfo.afterMsg = ChannelConfig[me.profile].AfterGameMessage;
			} else {
				Starter.chanInfo.afterMsg = StarterConfig.AfterGameMessage;
			}

			if (Starter.chanInfo.afterMsg) {
				!Array.isArray(Starter.chanInfo.afterMsg) && (Starter.chanInfo.afterMsg = [Starter.chanInfo.afterMsg]);

				for (i = 0; i < Starter.chanInfo.afterMsg.length; i++) {
					Starter.sayMsg(Starter.chanInfo.afterMsg[i]);
					delay(500);
				}
			}
		}

		if (!chatActionsDone) {
			chatActionsDone = true;

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("JoinChannel")) {
				Starter.chanInfo.joinChannel = ChannelConfig[me.profile].JoinChannel;
			} else {
				Starter.chanInfo.joinChannel = StarterConfig.JoinChannel;
			}

			if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("FirstJoinMessage")) {
				Starter.chanInfo.firstMsg = ChannelConfig[me.profile].FirstJoinMessage;
			} else {
				Starter.chanInfo.firstMsg = StarterConfig.FirstJoinMessage;
			}

			if (Starter.chanInfo.joinChannel) {
				!Array.isArray(Starter.chanInfo.joinChannel) && (Starter.chanInfo.joinChannel = [Starter.chanInfo.joinChannel]);
				!Array.isArray(Starter.chanInfo.firstMsg) && (Starter.chanInfo.firstMsg = [Starter.chanInfo.firstMsg]);

				for (i = 0; i < Starter.chanInfo.joinChannel.length; i++) {
					ControlAction.timeoutDelay("Chat delay", StarterConfig.ChatActionsDelay * 1e3);

					if (ControlAction.joinChannel(Starter.chanInfo.joinChannel[i])) {
						Starter.useChat = true;
					} else {
						print("ÿc1Unable to join channel, disabling chat messages.");

						Starter.useChat = false;
					}

					if (Starter.chanInfo.firstMsg[i] !== "") {
						Starter.sayMsg(Starter.chanInfo.firstMsg[i]);
						delay(500);
					}
				}
			}
		}

		// Announce game
		if (ChannelConfig[me.profile] && ChannelConfig[me.profile].hasOwnProperty("AnnounceGames")) {
			Starter.chanInfo.announce = ChannelConfig[me.profile].AnnounceGames;
		} else {
			Starter.chanInfo.announce = StarterConfig.AnnounceGames;
		}

		if (Starter.chanInfo.announce) {
			Starter.sayMsg("Next game is " + gameInfo.gameName + Starter.gameCount + (gameInfo.gamePass === "" ? "" : "//" + gameInfo.gamePass));
		}

		// Create
		if (!ControlAction.click(6, 533, 469, 120, 20)) {
			break;
		}

		// In case create button gets bugged
		if (!Starter.locationTimeout(5000, location)) {
			// Join
			if (!ControlAction.click(6, 652, 469, 120, 20)) {
				break;
			}

			// Create
			if (!ControlAction.click(6, 533, 469, 120, 20)) {
				break;
			}
		}

		break;
	case 4: // Create Game
		ControlAction.timeoutDelay("Create Game Delay", StarterConfig.DelayBeforeLogin * 1e3);
		D2Bot.updateStatus("Creating Game");

		control = getControl(1, 657, 342, 27, 20);

		// Set character difference
		if (battlenet && !!control) {
			if (typeof StarterConfig.CharacterDifference === "number") {
				if (control.disabled === 4) {
					ControlAction.click(6, 431, 341, 15, 16);
				}

				ControlAction.setText(1, 657, 342, 27, 20, StarterConfig.CharacterDifference.toString());
			} else if (!StarterConfig.CharacterDifference && control.disabled === 5) {
				ControlAction.click(6, 431, 341, 15, 16);
			}
		}

		// Get game name if there is none
		while (!gameInfo.gameName) {
			D2Bot.requestGameInfo();
			delay(500);
		}

		if (CharData.getStats().me.setDifficulty) {
			gameInfo.difficulty = CharData.getStats().me.setDifficulty;

			// only set the profile if the values aren't already the same
			if (gameInfo.difficulty !== setUp.difficulty) {
				D2Bot.setProfile(null, null, null, gameInfo.difficulty);
			}
			delay(200);
		}

		gameInfo.gameName = DataFile.getStats().gameName;

		if (gameInfo.gameName === "") {
			gameInfo.gameName = setUp.charName.substring(0, 7) + "-" + Starter.randomString(3, false) + "-";
		}

		// FTJ handler
		if (Starter.lastGameStatus === "pending") {
			isUp = "no";

			D2Bot.printToConsole("Failed to create game");
			ControlAction.timeoutDelay("FTJ delay", StarterConfig.FTJDelay * 1e3);
			D2Bot.updateRuns();
		}

		ControlAction.createGame((gameInfo.gameName === "Name" ? Starter.randomString(null, true) : gameInfo.gameName + Starter.gameCount), (gameInfo.gamePass === "Password" ? Starter.randomString(null, true) : gameInfo.gamePass), gameInfo.difficulty, StarterConfig.CreateGameDelay * 1000);
		Starter.lastGameStatus = "pending";
		Starter.setNextGame(gameInfo);
		Starter.locationTimeout(10000, location);

		break;
	case 5: // Join Game
		break;
	case 6: // Ladder
		break;
	case 7: // Channel List
		break;
	case 8: // Main Menu
		Starter.inGame && (Starter.inGame = false);
		if (Profile().type === 1 && firstRun) {
			ControlAction.click(6, 264, 324, 272, 35);

			break;
		}
	case 9: // Login
	case 18: // D2 Splash
		// Single Player screen fix
		if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
			ControlAction.click(6, 33, 572, 128, 35);

			break;
		}

		// Multiple realm botting fix in case of R/D or disconnect
		if (firstLogin && getLocation() === 9) {
			ControlAction.click(6, 33, 572, 128, 35);
		}

		D2Bot.updateStatus("Logging In");

		try {
			// make battlenet accounts/characters
			if (battlenet) {
				ControlAction.timeoutDelay("Login Delay", StarterConfig.DelayBeforeLogin * 1e3);
				// existing account
				if (setUp.account !== "") {
					try {
						login(me.profile);
					} catch (error) {
						if (DataFile.getStats().AcctPswd) {
							setUp.account = DataFile.getStats().AcctName;
							setUp.password = DataFile.getStats().AcctPswd;

							for (let i = 0; i < 5; i++) {
								if (ControlAction.loginAccount(setUp)) {
									break;
								}

								ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);
								setUp.account = DataFile.getStats().AcctName;
								setUp.password = DataFile.getStats().AcctPswd;
							}
						}
					}
				} else {
					// new account
					if (setUp.account === "") {
						if (StarterConfig.GlobalAccount || StarterConfig.GlobalAccountPassword) {
							setUp.account = StarterConfig.GlobalAccount.length > 0 ? StarterConfig.GlobalAccount + randomNumberGen(StarterConfig.AccountSuffixLength) : Starter.randomString(12, true);
							setUp.password = StarterConfig.GlobalAccountPassword.length > 0 ? StarterConfig.GlobalAccountPassword : Starter.randomString(12, true);

							if (setUp.account.length > 15) {
								D2Bot.printToConsole("Kolbot-SoloPlay: Account name exceeds MAXIMUM length (15). Please enter a shorter name or reduce the AccountSuffixLength under StarterConfig", 6);
								D2Bot.setProfile("", "", null, "Normal");
								D2Bot.stop();
							}

							if (setUp.password.length > 15) {
								D2Bot.printToConsole("Kolbot-SoloPlay: Password name exceeds MAXIMUM length (15). Please enter a shorter name under StarterConfig", 6);
								D2Bot.setProfile("", "", null, "Normal");
								D2Bot.stop();
							}

							print("Kolbot-SoloPlay :: Generated account information. " + (StarterConfig.GlobalAccount.length > 0 ? "Pre-defined " : "Random ") + "account used");
							print("Kolbot-SoloPlay :: Generated password information. " + (StarterConfig.GlobalAccountPassword.length > 0 ? "Pre-defined " : "Random ") + "password used");
							ControlAction.timeoutDelay("Generating Account Information", StarterConfig.DelayBeforeLogin * 1e3);
						} else {
							setUp.account = Starter.randomString(12, true);
							setUp.password = Starter.randomString(12, true);
							print("Generating Random Account Information");
							ControlAction.timeoutDelay("Generating Random Account Information", StarterConfig.DelayBeforeLogin * 1e3);
						}

						if (ControlAction.makeAccount(setUp)) {
							D2Bot.setProfile(setUp.account, setUp.password, null, "Normal");
							DataFile.updateStats("AcctName", setUp.account);
							DataFile.updateStats("AcctPswd", setUp.password);

							break;
						} else {
							setUp.account = "";
							setUp.password = "";
							D2Bot.setProfile(setUp.account, setUp.password, null, "Normal");
							D2Bot.restart(true);
						}
					}
				}

			} else {
				// SP/TCP  characters
				try {
					login(me.profile);
				} catch (err) {
					// Try to find the character and if that fails, make character
					if (!ControlAction.findCharacter(setUp)) {
						// Pop-up that happens when choosing a dead HC char
						if (getLocation() === 30) {
							ControlAction.click(6, 351, 337, 96, 32);	// Exit from that pop-up
							D2Bot.printToConsole("Character died", 9);
							deleteAndRemakeChar(setUp);
						} else {
							// If make character fails, check how many characters are on that account
							if (!ControlAction.makeCharacter(setUp)) {
								// Account is full
								if (ControlAction.getCharacters().length >= 18) {
									D2Bot.printToConsole("Kolbot-SoloPlay: Account is full", 8);
									D2Bot.stop();
								}
							}
						}
					}
				}
			}
		} catch (e) {
			print(e + " " + getLocation());
		}

		break;
	case 10: // Login Error
		string = "";
		text = ControlAction.getText(4, 199, 377, 402, 140);

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			switch (string) {
			case getLocaleString(5232): // illegal characters
			case getLocaleString(5233): // disallowed words
				D2Bot.stop();

				break;
			case getLocaleString(5207):
				D2Bot.updateStatus("Invalid Password");
				D2Bot.printToConsole("Invalid Password");
				ControlAction.timeoutDelay("Invalid password delay", StarterConfig.InvalidPasswordDelay * 6e4);
				D2Bot.printToConsole("Invalid Password - Restart");
				D2Bot.restart();

				break;
			case getLocaleString(5219): // password must be 2 characters
				D2Bot.updateStatus("Password must be 2 characters");
				D2Bot.printToConsole("Password must be 2 characters");
				D2Bot.stop();

				break;
			case getLocaleString(5208): // Invalid account
			case getLocaleString(5239): // An account name already exists
			case getLocaleString(5249): // Unable to create account
				D2Bot.updateStatus("Invalid Account Name");
				D2Bot.printToConsole("Invalid Account Name");
				setUp.account = "";
				setUp.password = "";
				D2Bot.setProfile(setUp.account, setUp.password);
				D2Bot.restart(true);

				break;
			case getLocaleString(5202): // cd key intended for another product
			case getLocaleString(10915): // lod key intended for another product
				D2Bot.updateStatus("Invalid CDKey");
				D2Bot.printToConsole("Invalid CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5199):
				D2Bot.updateStatus("Disabled CDKey");
				D2Bot.printToConsole("Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(10913):
				D2Bot.updateStatus("Disabled LoD CDKey");
				D2Bot.printToConsole("Disabled LoD CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			case getLocaleString(5347):
				D2Bot.updateStatus("Disconnected from battle.net.");
				D2Bot.printToConsole("Disconnected from battle.net.");
				ControlAction.click(6, 351, 337, 96, 32);
				ControlAction.click(6, 335, 412, 128, 35);

				break MainSwitch;
			default:
				D2Bot.updateStatus("Login Error");
				D2Bot.printToConsole("Login Error - " + string);

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}

				break;
			}
		}

		ControlAction.click(6, 335, 412, 128, 35);
		delay(1000);
		ControlAction.click(6, 33, 572, 128, 35);

		break;
	case 11: // Unable To Connect
		D2Bot.updateStatus("Unable To Connect");

		if (connectFailRetry < 2) {
			connectFailRetry += 1;
			ControlAction.click(6, 335, 450, 128, 35);

			break;
		}

		connectFailRetry >= 2 && (connectFail = true);

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.UnableToConnectDelay * 6e4);

			ControlAction.click(6, 335, 412, 128, 35);
			connectFail = false;
		}

		if (!ControlAction.click(6, 335, 450, 128, 35)) {
			break;
		}

		connectFailRetry = 0;
		connectFail = true;

		break;
	case 13: // Realm Down - Character Select screen
		D2Bot.updateStatus("Realm Down");
		delay(1000);

		if (!ControlAction.click(6, 33, 572, 128, 35)) {
			break;
		}

		updateCount();
		ControlAction.timeoutDelay("Realm Down", StarterConfig.RealmDownDelay * 6e4);
		D2Bot.CDKeyRD();

		if (gameInfo.switchKeys && !gameInfo.rdBlocker) {
			D2Bot.printToConsole("Realm Down - Changing CD-Key");
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			D2Bot.printToConsole("Realm Down - Restart");
			D2Bot.restart();
		}

		break;
	case 14: // Character Select / Main Menu - Disconnected
		D2Bot.updateStatus("Disconnected");
		delay(500);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 16: // Character Select - Please Wait popup
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 17: // Lobby - Lost Connection - just click okay, since we're toast anyway
		delay(1000);
		ControlAction.click(6, 351, 337, 96, 32);

		break;
	case 19: // Login - Cdkey In Use
		D2Bot.printToConsole(gameInfo.mpq + " is in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
		D2Bot.CDKeyInUse();

		if (gameInfo.switchKeys) {
			ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
			D2Bot.restart(true);
		} else {
			ControlAction.click(6, 335, 450, 128, 35);
			ControlAction.timeoutDelay("CD-Key in use", StarterConfig.CDKeyInUseDelay * 6e4);
		}

		break;
	case 20: // Single Player - Select Difficulty
		if (!battlenet) {
			print("ÿc8Kolbot-SoloPlayÿc0: Stuck on select difficulty screen. Exiting to main menu.");
			sendKey(0x1B);
			if (getLocation() === 12 && !getControl(4, 626, 100, 151, 44)) {
				ControlAction.click(6, 33, 572, 128, 35);
			}
		}

		break;
	case 21: // Main Menu - Connecting
		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 330, 416, 128, 35);
		}

		break;
	case 22: // Login - Invalid Cdkey (classic or xpac)
		text = ControlAction.getText(4, 162, 270, 477, 50);
		string = "";

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}
		}

		switch (string) {
		case getLocaleString(10914):
			D2Bot.printToConsole(gameInfo.mpq + " LoD key in use by " + ControlAction.getText(4, 158, 310, 485, 40), 6);
			D2Bot.CDKeyInUse();

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("LoD key in use", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		default:
			if (gameInfo.switchKeys) {
				D2Bot.printToConsole("Invalid CD-Key");
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			} else {
				ControlAction.click(6, 335, 450, 128, 35);
				ControlAction.timeoutDelay("Invalid CD-Key", StarterConfig.CDKeyInUseDelay * 6e4);
			}

			break;
		}

		break;
	case 29: // fix for unhandled location crashes at char creation
		if (!battlenet && firstRun) {
			// click out of the screen
			ControlAction.click(6, 33, 572, 128, 35);
		}
	case 12: // Character Select
		hideConsole(); // seems to fix odd crash with single-player characters if the console is open to type in
	case 23: // Character Select - Connecting
	case 42: // Empty character screen
		string = "";
		text = ControlAction.getText(4, 45, 318, 531, 140);

		if (text) {
			for (i = 0; i < text.length; i++) {
				string += text[i];

				if (i !== text.length - 1) {
					string += " ";
				}
			}

			// CDKey disabled from realm play
			if (string === getLocaleString(11161)) {
				D2Bot.updateStatus("Realm Disabled CDKey");
				D2Bot.printToConsole("Realm Disabled CDKey: " + gameInfo.mpq, 6);
				D2Bot.CDKeyDisabled();

				if (gameInfo.switchKeys) {
					ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
					D2Bot.restart(true);
				} else {
					D2Bot.stop();
				}
			}
		}

		if (deadCheck) {
			deleteAndRemakeChar(setUp);
			deadCheck = false;
		}

		if (setUp) {
			if (!ControlAction.findCharacter(setUp)) {
				if (setUp.charName === DataFile.getObj().name) {
					ControlAction.timeoutDelay("[R/D] Character not found ", 18e4);
					D2Bot.printToConsole("Avoid Creating New Character - Restart");
					D2Bot.restart();
				} else {
					if (!ControlAction.makeCharacter(setUp)) {
						if (ControlAction.getCharacters().length >= 18) {
							D2Bot.printToConsole("Kolbot-SoloPlay: Account is full", 9);
							D2Bot.stop();
						}
					}
				}
			} else {
				ControlAction.loginCharacter(setUp, false);
			}
		}

		if (!Starter.locationTimeout(StarterConfig.ConnectingTimeout * 1e3, location)) {
			ControlAction.click(6, 33, 572, 128, 35);
			gameInfo.rdBlocker && D2Bot.restart();
		}

		break;
	case 24: // Server Down - not much to do but wait..
		break;
	case 25: // Lobby - Please Wait
		if (!Starter.locationTimeout(StarterConfig.PleaseWaitTimeout * 1e3, location)) {
			ControlAction.click(6, 351, 337, 96, 32);
		}

		break;
	case 26: // Lobby - Game Name Exists
		ControlAction.click(6, 533, 469, 120, 20);

		gameCount += 1;
		Starter.lastGameStatus = "ready";

		break;
	case 27: // Gateway Select
		ControlAction.click(6, 436, 538, 96, 32);

		break;
	case 28: // Lobby - Game Does Not Exist
		D2Bot.printToConsole("Game doesn't exist");

		if (gameInfo.rdBlocker) {
			D2Bot.printToConsole(gameInfo.mpq + " is probably flagged.", 6);

			if (gameInfo.switchKeys) {
				ControlAction.timeoutDelay("Key switch delay", StarterConfig.SwitchKeyDelay * 1000);
				D2Bot.restart(true);
			}
		} else {
			Starter.locationTimeout(StarterConfig.GameDoesNotExistTimeout * 1e3, location);
		}

		Starter.lastGameStatus = "ready";

		break;
	case 34: // e-mail
		if (getControl(6, 415, 412, 128, 35)) {
			ControlAction.click(6, 415, 412, 128, 35);
		} else {
			ControlAction.click(6, 265, 572, 272, 35);
		}

		break;
	case 38: // Game is full
		// doesn't happen when making
		break;
	case 39: // Other Multiplayer
		ControlAction.click(6, 264, 568, 272, 35);

		break;
	case 40: // TCP/IP Game
		ControlAction.click(6, 39, 571, 128, 35);

		break;
	case 41: // TCP/IP Game - Enter Host IP
		try {
			login(me.profile);
		} catch (e) {
		//
		}

		break;
	case 44: // Unable To Connect TCP/IP
		D2Bot.updateStatus("Unable To Connect TCP/IP");

		if (connectFail) {
			ControlAction.timeoutDelay("Unable to Connect", StarterConfig.TCPIPNoHostDelay * 1e3);

			connectFail = false;
		} else {
			connectFail = true;
		}

		ControlAction.click(6, 351, 337, 96, 32);

		break;
	default:
		if (location !== undefined) {
			D2Bot.printToConsole("Unhandled location " + location);
			delay(500);
			D2Bot.restart();
		}

		break;
	}
}

function main () {
	debugLog(me.profile);
	addEventListener('copydata', ReceiveCopyData);
	addEventListener('scriptmsg', ScriptMsgEvent);

	let oogTick = getTickCount();

	while (!handle) {
		delay(100);
	}

	DataFile.updateStats("handle", handle);
	delay(500);
	D2Bot.init();
	load("tools/heartbeat.js");

	while (!gameInfo) {
		D2Bot.requestGameInfo();
		delay(500);
	}

	Developer.logPerformance && Tracker.checkValidity();
	Starter.gameCount = (DataFile.getStats().runs + 1 || 1);

	if (gameInfo.error) {
		ControlAction.timeoutDelay("Crash Delay", StarterConfig.CrashDelay * 1e3);
		battlenet && D2Bot.updateRuns();
	}

	DataFile.updateStats("debugInfo", JSON.stringify({currScript: "none", area: "out of game"}));

	while (!setUp) {
		D2Bot.getProfile();
		print("Getting Profile");
		delay(500);
	}

	if (setUp.charName === "") {
		print("Generating Character Name");
		setUp.charName = NameGen();
		D2Bot.setProfile(null, null, setUp.charName, "Normal");

		let gamename = setUp.charName.substring(0, 7) + "-" + Starter.randomString(3, false) + "-";
		DataFile.updateStats("gameName", gamename);

		delay(50);
	} else if (firstRun) {
		// should be first run on this profile since we created a new data file so initialize difficulty to normal
		// check first before setting to avoid unneeded setProfile calls
		setUp.difficulty !== "Normal" && D2Bot.setProfile(null, null, null, "Normal");
	}

	let myExp, myGold, resPenalty, frRes, crRes, lrRes, prRes, areaName, diffName;

	while (true) {
		// returns true before actually in game so we can't only use this check
		while (me.ingame) {
			// returns false when switching acts so we can't use while
			if (me.gameReady) {
				isUp = "yes";

				if (!Starter.inGame) {
					Starter.gameStart = getTickCount();
					Starter.lastGameStatus = "ingame";
					Starter.inGame = true;
					resPenalty = me.gametype === 0 ? [0, 20, 50][me.diff] : [0, 40, 100][me.diff];
					diffName = ['Norm', 'Night', 'Hell'][me.diff];
					DataFile.updateStats("runs", Starter.gameCount);
					DataFile.updateStats("ingameTick");
					Developer.logPerformance && Tracker.update((getTickCount() - oogTick));
					oogTick = 0;
				}

				if (me.ingame && me.gameReady) {
					let statusString = "";

					try {
						myExp = me.getStat(13) > 0 ? Experience.progress() : 0;
						myGold = me.getStat(14) + me.getStat(15);
						frRes = Math.min(75, me.getStat(39) - resPenalty);
						crRes = Math.min(75, me.getStat(43) - resPenalty);
						lrRes = Math.min(75, me.getStat(41) - resPenalty);
						prRes = Math.min(75, me.getStat(45) - resPenalty);
						areaName = !!me.area ? Pather.getAreaName(me.area) : "";
						statusString = "Acc: " + (me.account ? me.account : "SinglePlayer") + " | CharName: " + me.name + "Lvl: " + me.charlvl + " (" + myExp + "%) (Diff: " + diffName + ") (A: " + areaName + ") (G: " + myGold + ") (F: " + frRes + "/C: " + crRes + "/L: " + lrRes + "/P: " + prRes + ")";
					} catch (e) {
						print(e);
					}

					D2Bot.updateStatus(statusString + timer(Starter.gameStart));
				}
			}

			delay(1000);
		}

		// was in game so start recording oog time
		Starter.inGame && oogTick === 0 && (oogTick = getTickCount());

		isUp = "no";
		locationAction(getLocation());
		delay(1000);
	}
}
